{"version":3,"sources":["components/BreakInterval.js","components/SessionLength.js","components/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["BreakInterval","props","className","disabled","isPlay","onClick","breakInterval","decreaseBreak","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Timer","state","isSession","timerSecond","intervalId","playTimer","bind","decreaseTimer","stopTimer","resetTimer","setInterval","this","onPlayStopTimer","setState","timerMinute","toggleInterval","updateTimerMinute","prevState","clearInterval","React","Component","App","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","onToggleInterval","onResetTimer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12a1d174.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Create a Component with props named breakInterval too use it in the App class\r\nfunction BreakInterval(props) {\r\n  function decreaseCounter() {\r\n    if (props.breakInterval === 1) {\r\n      return;\r\n    }\r\n\r\n    props.decreaseBreak();\r\n  }\r\n\r\n  function increaseCounter() {\r\n    if (props.breakInterval === 60) {\r\n      return;\r\n    }\r\n    //if props.breakInterval under 60 use props.increaseBreak() in App.js\r\n    props.increaseBreak();\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h4>Break Length</h4>\r\n      <section className=\"interval-container\">\r\n        <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseCounter}>Down</button>\r\n        <p className=\"interval-length\">{props.breakInterval}</p>\r\n        <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseCounter}>Up</button>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default BreakInterval;\r\n","import React from \"react\";\r\n\r\n// Create a Component with props named sessionLength too use it in the App class\r\nfunction SessionLength(props) {\r\n\r\n\r\n function increaseSession() {\r\n    if (props.sessionLength === 60) {\r\n      return;\r\n    }\r\n    //if props.breakInterval under 60 use props.increaseSession() in App.js\r\n    props.increaseSession();\r\n  }\r\n\r\n   function decreaseSession() {\r\n    if (props.sessionLength === 1) {\r\n      return;\r\n    }\r\n    //if props.breakInterval under 60 use props.decreaseSession() in App.js\r\n    props.decreaseSession();\r\n  }\r\n\r\n\r\n  return (\r\n    <section >\r\n      <h4>Session Length</h4>\r\n      <section className=\"interval-container\">\r\n        <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={decreaseSession}>Down</button>\r\n        <p className=\"interval-length\">{props.sessionLength}</p>\r\n        <button disabled={props.isPlay === true ? \"disabled\" : \"\"} onClick={increaseSession}>Up</button>\r\n      </section>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default SessionLength;\r\n","import React from \"react\";\r\n\r\nclass Timer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isSession: true,\r\n      timerSecond: 0,\r\n      intervalId: 0,\r\n    };\r\n    this.playTimer = this.playTimer.bind(this);\r\n    this.decreaseTimer = this.decreaseTimer.bind(this);\r\n    this.stopTimer = this.stopTimer.bind(this);\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n  }\r\n\r\n  playTimer() {\r\n    let intervalId = setInterval(this.decreaseTimer, 1000);\r\n    this.props.onPlayStopTimer(true);\r\n    this.setState({\r\n      intervalId: intervalId,\r\n    });\r\n  }\r\n\r\n  decreaseTimer() {\r\n    switch (this.state.timerSecond) {\r\n      case 0:\r\n        if (this.props.timerMinute === 0) {\r\n          if (this.state.isSession) {\r\n            this.setState({\r\n              isSession: false,\r\n            });\r\n            this.props.toggleInterval(this.state.isSession);\r\n          } else {\r\n            this.setState({\r\n              isSession: true,\r\n            });\r\n            this.props.toggleInterval(this.state.isSession);\r\n          }\r\n        } else {\r\n          this.props.updateTimerMinute();\r\n          this.setState({\r\n            timerSecond: 59,\r\n          });\r\n        }\r\n\r\n        break;\r\n      default:\r\n        this.setState((prevState) => {\r\n          return {\r\n            timerSecond: prevState.timerSecond - 1,\r\n          };\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  stopTimer() {\r\n    clearInterval(this.state.intervalId);\r\n    this.props.onPlayStopTimer(false);\r\n  }\r\n\r\n  resetTimer() {\r\n    this.stopTimer();\r\n    this.props.resetTimer();\r\n    this.props.onPlayStopTimer(false);\r\n    this.setState({\r\n      timerSecond: 0,\r\n      isSession:true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <section className=\"timer-container\">\r\n          <h4>{this.state.isSession === true ? \"Session\" : \"Break\"}</h4>\r\n          <span className=\"timer\">{this.props.timerMinute}</span>\r\n          <span className=\"timer\">:</span>\r\n          {/* if timerSecond is 0 display 00 if timerSecond is inferior 10 display 0 + timerSeconde if superior to 10 display timerSecond*/}\r\n          <span className=\"timer\">\r\n            {this.state.timerSecond === 0\r\n              ? \"00\"\r\n              : this.state.timerSecond < 10\r\n              ? \"0\" + this.state.timerSecond\r\n              : this.state.timerSecond}\r\n          </span>\r\n        </section>\r\n        <section className=\"timer-actions\">\r\n          <button disabled={this.props.isPlay === true ? \"disabled\" : \"\"} onClick={this.playTimer}>Play</button>\r\n          <button disabled={this.props.isPlay === false ? \"disabled\" : \"\"} onClick={this.stopTimer}>Stop</button>\r\n          <button onClick={this.resetTimer}>Refresh</button>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\nimport \"../App.css\";\nimport BreakInterval from \"./BreakInterval\";\nimport SessionLength from \"./SessionLength\";\nimport Timer from \"./Timer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25,\n      isPlay:false\n    };\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n    \n    \n    \n    \n  }\n\n  //\n  // ─── BREAKINTERVAL COMPONENT ────────────────────────────────────────────────────\n\n  // Increase Break Length with props.increaseBreak() //\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1,\n      };\n    });\n\n    //** Also Works **//\n    //this.setState({breakLength: this.state.breakLength + 1})\n  }\n\n  // Decrease Break Length with props.decreaseBreak() //\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1,\n      };\n    });\n  }\n\n  //\n  // ─── SESSIONLENGTH COMPONENT ────────────────────────────────────────────────────\n\n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1,\n      };\n    });\n  }\n\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1,\n      };\n    });\n  }\n\n  //\n  // ─── TIMER COMPONENT ────────────────────────────────────────────────────────────\nonUpdateTimerMinute(){\n  this.setState((prevState) => {\n      return {\n        \n        timerMinute: prevState.sessionLength - 1,\n      };\n    });\n}\n\n\nonToggleInterval(isSession){\n  if (isSession){\n     this.setState({\n        timerMinute: this.state.sessionLength\n\n    })\n  }else{\n    this.setState({\n        timerMinute: this.state.breakLength\n\n    })\n  }\n \n}\n\nonResetTimer(){\n  this.setState({\n    timerMinute:this.state.sessionLength\n  })\n}\n\nonPlayStopTimer(isPlay){\n  this.setState({\n    isPlay:isPlay\n  })\n}\n\n  render() {\n    return (\n      <main>\n        <h2>Pomodoro Clock</h2>\n        <section className=\"interval-length-container\">\n          <BreakInterval\n            isPlay={this.state.isPlay}\n            breakInterval={this.state.breakLength}\n            increaseBreak={this.onIncreaseBreakLength}\n            decreaseBreak={this.onDecreaseBreakLength}\n          />\n          <SessionLength\n            isPlay={this.state.isPlay}\n            sessionLength={this.state.sessionLength}\n            increaseSession={this.onIncreaseSessionLength}\n            decreaseSession={this.onDecreaseSessionLength}\n          />\n        </section>\n        <Timer\n          isPlay={this.state.isPlay}\n          timerMinute={this.state.timerMinute}\n          breakLength={this.state.breakLength}\n          updateTimerMinute={this.onUpdateTimerMinute}\n          toggleInterval={this.onToggleInterval}\n          resetTimer={this.onResetTimer}\n          onPlayStopTimer={this.onPlayStopTimer}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}